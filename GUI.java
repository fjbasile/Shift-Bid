/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */


import java.awt.TextField;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Random;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JTextField;


/**
 *
 * @author Frank
 */
public class GUI extends javax.swing.JFrame {

    private boolean stop = false;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        setDefaults();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        stepOneLabel = new javax.swing.JLabel();
        totalAMTS = new javax.swing.JTextField();
        stepTwoLabel = new javax.swing.JLabel();
        weekOneLabel = new javax.swing.JLabel();
        sunLabel = new javax.swing.JLabel();
        monLabel = new javax.swing.JLabel();
        tueLabel = new javax.swing.JLabel();
        wedLabel = new javax.swing.JLabel();
        thuLabel = new javax.swing.JLabel();
        friLabel = new javax.swing.JLabel();
        satLabel = new javax.swing.JLabel();
        secSunNum = new javax.swing.JTextField();
        secMonNum = new javax.swing.JTextField();
        secTueNum = new javax.swing.JTextField();
        secWedNum = new javax.swing.JTextField();
        secThuNum = new javax.swing.JTextField();
        secFriNum = new javax.swing.JTextField();
        secSatNum = new javax.swing.JTextField();
        friNum = new javax.swing.JTextField();
        satNum = new javax.swing.JTextField();
        thuNum = new javax.swing.JTextField();
        wedNum = new javax.swing.JTextField();
        tueNum = new javax.swing.JTextField();
        monNum = new javax.swing.JTextField();
        sunNum = new javax.swing.JTextField();
        weekTwoLabel = new javax.swing.JLabel();
        sameNumCheckbox = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputText = new javax.swing.JTextArea();
        calculate = new javax.swing.JButton();
        stepThreeLabel = new javax.swing.JLabel();
        initPopText = new javax.swing.JTextField();
        progressBar = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 204, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        stepOneLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        stepOneLabel.setForeground(new java.awt.Color(255, 51, 51));
        stepOneLabel.setText("Step 1: Enter the total number of AMT's:");
        getContentPane().add(stepOneLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 25, -1, -1));

        totalAMTS.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        totalAMTS.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(totalAMTS, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 20, 50, -1));

        stepTwoLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        stepTwoLabel.setForeground(new java.awt.Color(255, 51, 51));
        stepTwoLabel.setText("Step 2: Enter desired number of AMT's for each day of each week:");
        getContentPane().add(stepTwoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 68, -1, -1));

        weekOneLabel.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        weekOneLabel.setText("Week 1");
        getContentPane().add(weekOneLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(327, 124, -1, -1));

        sunLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        sunLabel.setText("SUN");
        getContentPane().add(sunLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(68, 191, -1, -1));

        monLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        monLabel.setText("MON");
        getContentPane().add(monLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(157, 191, -1, -1));

        tueLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        tueLabel.setText("TUE");
        getContentPane().add(tueLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(255, 191, -1, -1));

        wedLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        wedLabel.setText("WED");
        getContentPane().add(wedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(345, 191, -1, -1));

        thuLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        thuLabel.setText("THU");
        getContentPane().add(thuLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(444, 191, -1, -1));

        friLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        friLabel.setText("FRI");
        getContentPane().add(friLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(539, 191, -1, -1));

        satLabel.setFont(new java.awt.Font("Lucida Grande", 0, 16)); // NOI18N
        satLabel.setText("SAT");
        getContentPane().add(satLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(628, 191, -1, -1));

        secSunNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        secSunNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(secSunNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 217, 80, -1));

        secMonNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        secMonNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(secMonNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 217, 80, -1));

        secTueNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        secTueNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(secTueNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 217, 80, -1));

        secWedNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        secWedNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(secWedNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(322, 217, 80, -1));

        secThuNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        secThuNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(secThuNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 217, 80, -1));

        secFriNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        secFriNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(secFriNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 217, 80, -1));

        secSatNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        secSatNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(secSatNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(604, 217, 80, -1));

        friNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        friNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(friNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(512, 155, 80, -1));

        satNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        satNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(satNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(604, 155, 80, -1));

        thuNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        thuNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(thuNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 155, 80, -1));

        wedNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        wedNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(wedNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(322, 155, 80, -1));

        tueNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        tueNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(tueNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 155, 80, -1));

        monNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        monNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(monNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(138, 155, 80, -1));

        sunNum.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        sunNum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        getContentPane().add(sunNum, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 155, 80, -1));

        weekTwoLabel.setFont(new java.awt.Font("Lucida Grande", 1, 20)); // NOI18N
        weekTwoLabel.setText("Week 2");
        getContentPane().add(weekTwoLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(322, 259, -1, -1));

        sameNumCheckbox.setText("Week 2 has same AMT's as Week 1");
        sameNumCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sameNumCheckboxActionPerformed(evt);
            }
        });
        getContentPane().add(sameNumCheckbox, new org.netbeans.lib.awtextra.AbsoluteConstraints(415, 262, -1, -1));

        outputText.setColumns(20);
        outputText.setFont(new java.awt.Font("Lucida Grande", 0, 12)); // NOI18N
        outputText.setRows(5);
        jScrollPane1.setViewportView(outputText);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(46, 416, 638, 460));

        calculate.setFont(new java.awt.Font("Lucida Grande", 0, 24)); // NOI18N
        calculate.setText("Calculate");
        calculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                calculateActionPerformed(evt);
            }
        });
        getContentPane().add(calculate, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 760, 180, 80));

        stepThreeLabel.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        stepThreeLabel.setForeground(new java.awt.Color(255, 51, 51));
        stepThreeLabel.setText("Step 3: Enter an initial population:");
        getContentPane().add(stepThreeLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 320, 250, 30));

        initPopText.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        initPopText.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        initPopText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initPopTextActionPerformed(evt);
            }
        });
        getContentPane().add(initPopText, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 320, 80, 30));
        getContentPane().add(progressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 850, 180, 20));

        jLabel1.setFont(jLabel1.getFont().deriveFont((float)16));
        jLabel1.setForeground(new java.awt.Color(255, 51, 51));
        jLabel1.setText("The larger initial population, the more results will be yielded, but with longer run time");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 360, -1, 30));

        pack();
    }// </editor-fold>                        
   
        private void setDefaults()
    {
        totalAMTS.setText("25");
        sunNum.setText("12");
        monNum.setText("15");
        tueNum.setText("15");
        wedNum.setText("15");
        thuNum.setText("15");
        friNum.setText("16");
        satNum.setText("12");
    }
        
    private void sameNumCheckboxActionPerformed(java.awt.event.ActionEvent evt) {                                                
        JTextField [] dayNums = {sunNum, monNum, tueNum, wedNum, thuNum, friNum,
            satNum, secSunNum, secMonNum, secTueNum, secWedNum, secThuNum,
            secFriNum, secSatNum};
        try
        {
            if (sameNumCheckbox.isSelected())
            {
                for (int i = 7; i < 14; i ++)
                {
                    dayNums[i].setEnabled(false);
                    dayNums[i].setText(dayNums[i-7].getText());
                }
            }
            
            else if (sameNumCheckbox.isSelected() == false)
            {
                for (int i = 7; i < 14; i++)
                {
                    dayNums[i].setEnabled(true);
                    dayNums[i].setText("");
                }
            }
        }
        
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(rootPane, "An error occurred");
        }
    }                                               

    private void calculateActionPerformed(java.awt.event.ActionEvent evt) {                                          
                JTextField [] days = {sunNum, monNum, tueNum, wedNum, thuNum, friNum,
            satNum, secSunNum, secMonNum, secTueNum, secWedNum, secThuNum,
            secFriNum, secSatNum};
                
                int [] amtNums = new int [14];
                stop = false;
                int initPop;
                outputText.setText("");
                outputText.update(outputText.getGraphics());
                //verifies correct input of AMT's
                try 
                {
                    Integer.parseInt(totalAMTS.getText());
                }
                
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane, "You didn't enter a valid number of AMT's in Step 1.");
                }
                
                //verifies correct inputs for weekdays
                try
                {
                    for (JTextField day : days)
                    {
                        Integer.parseInt(day.getText());
                    }
                }
                
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane, "You didn't enter a valid number in one of the blocks for Step 2.");
                }
                
                try
                {
                    int amts = Integer.parseInt(totalAMTS.getText());
                    int sum = 0;
                    for (JTextField day : days)
                    {
                        sum += Integer.parseInt(day.getText());
                    }
                    if (amts *40 > (sum * 10)/2)
                    {
                        throw new Exception();
                    }
                }
                
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane, "You have too many AMT's in Step 1 for this man-hour configuration. \nEnsure the total number of AMT's multiplied by 40 is equal to the sum of all AMT's on each day in one week times 10." );
                }
                
                try
                {
                    int amts = Integer.parseInt(totalAMTS.getText());
                    int sum = 0;
                    for (JTextField day : days)
                    {
                        sum += Integer.parseInt(day.getText());
                    }
                    if (amts *40 < (sum * 10)/2)
                    {
                        throw new Exception();
                    }
                }
                
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane, "You don't have enough AMT's in Step 1 for this man-hour configuration.\nEnsure the total number of AMT's multiplied by 40 is equal to the sum of all AMT's on each day in one week times 10.");
                }
                
                try
                {
                    Integer.parseInt(initPopText.getText());
                }
                
                catch (Exception e)
                {
                    JOptionPane.showMessageDialog(rootPane, "You didn't enter a valid population size.");
                }
                
                for (int i = 0; i < 14; i++)
                {
                    amtNums[i] = Integer.parseInt(days[i].getText());
                }
                
                initPop = Integer.parseInt(initPopText.getText());
                calculate.setText("Calculating");
                outputText.setText("");
                calculate.setEnabled(false);
                calculate.update(calculate.getGraphics());
                generateShifts(Integer.parseInt(totalAMTS.getText()), amtNums, initPop);
                calculate.setEnabled(true);
                calculate.setText("Calculate");               
    }                                         

    private void initPopTextActionPerformed(java.awt.event.ActionEvent evt) {                                            
        // TODO add your handling code here:
    }                                           

    private void generateShifts(int shiftSize, int [] targetBid, int POPSIZE)
    {
        long startTime = System.nanoTime();
        
        int [] h_array = {0,1,1,1,1,0,0};
        int [] e_array = {0,0,1,1,1,1,0};
        int [] d_array = {0,0,0,1,1,1,1};
        int [] c_array = {1,1,1,1,0,0,0};
        int [] p_array = {1,1,0,0,0,1,1};
        int [] a_array = {1,0,0,0,1,1,1};
        int [] m_array = {0,1,1,0,1,1,0};
        int [] n_array = {0,0,1,0,1,1,1};
        int [] o_array = {1,1,0,0,1,1,0};
        int [] r_array = {1,1,0,1,0,0,1};
        int [] u_array = {0,1,1,1,0,1,0};        
        int [] a1_array = {0,1,1,0,0,1,1};
        int [] a2_array = {0,1,1,1,0,0,1};
        int [] a3_array = {1,0,1,0,0,1,1};
        int [] a4_array = {1,0,0,1,0,1,1};
        int [] b1_array = {0,0,1,1,0,1,1};
        int [] b2_array = {1,1,0,1,1,0,0};
        int [] d1_array = {1,0,0,1,1,1,0};
        int [] d2_array = {1,0,0,1,1,0,1};
        int [] e1_array = {0,0,1,1,1,0,1};
        int [] n1_array = {0,1,0,0,1,1,1};
        int [] p1_array = {1,1,0,0,1,0,1};
        int [] q1_array = {1,1,1,0,0,0,1};
        int [] q2_array = {1,0,1,1,1,0,0};
        int [] q3_array = {1,0,1,1,0,0,1};
        int [] q4_array = {1,0,1,0,1,0,1};
        int [] r1_array = {1,1,1,0,1,0,0};
        int [] r2_array = {1,1,1,0,0,1,0};
        int [] r3_array = {1,1,0,1,0,1,0};
        int [] u1_array = {0,1,0,1,1,1,0};
        
        Shift H = new Shift(h_array, "H");
        Shift E = new Shift(e_array, "E");
        Shift D = new Shift(d_array, "D");
        Shift C = new Shift(c_array, "C");
        Shift P = new Shift(p_array, "P");
        Shift A = new Shift(a_array, "A");
        Shift M = new Shift(m_array, "M");
        Shift N = new Shift(n_array, "N");
        Shift O = new Shift(o_array, "O");
        Shift R = new Shift(r_array, "R");
        Shift U = new Shift(u_array, "U");      
        Shift U1 = new Shift(u1_array, "U1");
        Shift R3 = new Shift(r3_array, "R3");
        Shift R2 = new Shift(r2_array, "R2");
        Shift R1 = new Shift(r1_array, "R1");
        Shift Q4 = new Shift(q4_array, "Q4");
        Shift Q3 = new Shift(q3_array, "Q3");
        Shift Q2 = new Shift(q2_array, "Q2");
        Shift Q1 = new Shift(q1_array, "Q1");
        Shift P1 = new Shift(p1_array, "P1");
        Shift N1 = new Shift(n1_array, "N1");
        Shift E1 = new Shift(e1_array, "E1");
        Shift D2 = new Shift(d2_array, "D2");
        Shift D1 = new Shift(d1_array, "D1");
        Shift B2 = new Shift(b2_array, "B2");
        Shift B1 = new Shift(b1_array, "B1");
        Shift A4 = new Shift(a4_array, "A4");
        Shift A3 = new Shift(a3_array, "A3");
        Shift A2 = new Shift(a2_array, "A2");
        Shift A1 = new Shift(a1_array, "A1");
        
        Rotator H_D = new Rotator(H, D, "H-D");
        Rotator D_H = new Rotator(D, H, "D-H");
        Rotator E1_R1 = new Rotator(E1, R1, "E1-R1");
        Rotator R1_E1 = new Rotator(R1, E1, "R1-E1");
        Rotator B1_Q2 = new Rotator(B1, Q2, "B1-Q2");
        Rotator Q2_B1 = new Rotator(Q2, B1, "Q2-B1");
        Rotator D_D1 = new Rotator(D, D1, "D-D1");
        Rotator D1_D = new Rotator(D1, D, "D1-D");
        Rotator P_D = new Rotator(P, D, "P-D");
        Rotator D_P = new Rotator(D, P, "D-P");
        Rotator O_D = new Rotator(O, D, "O-D");
        Rotator D_O = new Rotator(D, O, "D-O");
        Rotator A1_C = new Rotator(A1, C, "A1-C");
        Rotator C_A1 = new Rotator(C, A1, "C-A1");
        Rotator A1_B2 = new Rotator(A1, B2, "A1-B2");
        Rotator A1_D1 = new Rotator(A1, D1, "A1-D1");
        Rotator A1_E = new Rotator(A1, E, "A1-E");
        Rotator A1_H = new Rotator(A1, H, "A1-H");
        Rotator A1_M = new Rotator(A1, M, "A1-M");
        Rotator A1_O = new Rotator(A1, O, "A1-O");
        Rotator A1_R1 = new Rotator(A1, R1, "A1-R1");
        Rotator B1_B2 = new Rotator(B1, B2, "B1-B2");
        Rotator B2_A1 = new Rotator(B2, A1, "B2-A1");
        Rotator B2_B1 = new Rotator(B2, B1, "B2-B1");
        Rotator C_E = new Rotator(C, E, "C-E");
        Rotator C_H = new Rotator(C, H, "C-H");
        Rotator C_P = new Rotator(C, P, "C-P");
        Rotator C_Q1 = new Rotator(C, Q1, "C-Q1");
        Rotator D1_A1 = new Rotator(D1, A1, "D1-A1");
        Rotator D_E = new Rotator(D, E, "D-E");
        Rotator E1_Q2 = new Rotator(E1, Q2, "E1-Q2");
        Rotator E_A1 = new Rotator(E, A1, "E-A1");
        Rotator E_D = new Rotator(E, D, "E-D");
        Rotator E_H = new Rotator(E, H, "E-H");
        Rotator E_Q2 = new Rotator(E, Q2, "E-Q2");
        Rotator H_A1 = new Rotator(H, A1, "H-A1");
        Rotator H_C = new Rotator(H, C, "H-C");
        Rotator H_E = new Rotator(H, E, "H-E");
        Rotator H_N1 = new Rotator(H, N1, "H-N1");
        Rotator M_A1 = new Rotator(M, A1, "M-A1");
        Rotator M_N1 = new Rotator(M, N1, "M-N1");
        Rotator N1_H = new Rotator(N1, H, "N1-H");
        Rotator N1_O = new Rotator(N1, O, "N1-O");
        Rotator N_A1 = new Rotator(N, A1, "N-A1");
        Rotator O_A1 = new Rotator(O, A1, "O-A1");
        Rotator P_C = new Rotator(P, C, "P-C");
        Rotator Q1_C = new Rotator(Q1, C, "Q1-C");
        Rotator Q2_E1 = new Rotator(Q2, E1, "Q2-E1");
        Rotator R2_A1 = new Rotator(R2, A1, "R2-A1");
        Rotator R2_A2 = new Rotator(R2, A2, "R2-A2");
        //Shift [] shifts = {H,E,C,Q1,A,P,M,D,A1,O,E1,R1,Q2,B1};
        Shift [] shifts = {H,E,C,Q1,A,P,M,D,O,A1};
        
        Bid [] newPop = getBidBatch(shifts, shiftSize, POPSIZE);
        ArrayList<Bid> survivors = new ArrayList<>();
        Set<String> goodBids = new HashSet<>();
        DecimalFormat df = new DecimalFormat("#.00");

        //add members of the initial population to the survivors arrayList
        survivors.addAll(Arrays.asList(newPop));
        
        
        for (int i = 0; i < survivors.size(); i++) //for each member in survivors
        {
            int fitness = 0; //initial fitness = 0
            int bestFitness = 0; //best fitness = 0
            
            while (fitness != 100) //bid's fitness != 100
            {
                //generate a shift Bid
                Bid generatedBid;
                //evolve the bid
                generatedBid = evolve(survivors.get(i), shifts, targetBid);
                //set the fitness score of that bid
                generatedBid.setFitnessScore(targetBid);
                //update the fitness variable
                fitness = generatedBid.getFitnessScore();
                
                //if current fitness is better than overall best fitness so far
                if (fitness > bestFitness)
                {
                    //update the best fitness score
                    bestFitness = fitness;
                    //sort the bid
                    generatedBid.sortBid();
                }
               
                //fitness = 100 and half-rotating shifts are equal
                if (fitness == 100 && (generatedBid.instanceOf(B1) == generatedBid.instanceOf(Q2)) && (generatedBid.instanceOf(O) <= generatedBid.instanceOf(D)) && (generatedBid.instanceOf(E1) == generatedBid.instanceOf(R1)) && (generatedBid.instanceOf(A1) <= generatedBid.instanceOf(C)) &&(generatedBid.instanceOf(H) == generatedBid.instanceOf(E)))
                {
                   generatedBid.makeRotator();
                    //add the string of the bid to the goodBids set
                   goodBids.add(generatedBid.toString());
                   //make the outputText blank
                   outputText.setText("");
                   //show % complete
                   outputText.append(df.format(((i*1.0)/POPSIZE)*100) + "% Complete " + "\n\n" );
                   //update the graphics of the output text
                   outputText.update(outputText.getGraphics());
                   //iterator for the goodBids set
                   Iterator it = goodBids.iterator();
                   while (it.hasNext()) //while there is a next member of the goodBids set
                   {
                       //append that text to the outputText
                       outputText.append(it.next() + "\n\n");
                       //update the outputText graphics
                       outputText.update(outputText.getGraphics());
                   }                   
                }
            }
            
            //make an iterator for goodBids
            Iterator it = goodBids.iterator();
            //set text to null
            outputText.setText("");
            //show percentage complete
            outputText.append(df.format(((i*1.0)/POPSIZE)*100) + "% Complete " + "\n\n" );
            //while there's a member of the set to be iterated over
            while (it.hasNext())
            {
                //update the output text
                outputText.append(it.next() + "\n\n");
                //update the graphics
                outputText.update(outputText.getGraphics());
            }  
        }
        
        //this is to show 100% completion rather than 99%
        //iterator for the goodBids set
        Iterator it = goodBids.iterator();
        //output text is null
        outputText.setText("");
        //100% shown
        outputText.append(df.format(100.00) + "% Complete " + "\n\n" );
        //iterate over the members of goodBids
        while (it.hasNext())
        {
            //update the text for outputText
            outputText.append(it.next() + "\n\n");
            //update the graphics
            outputText.update(outputText.getGraphics());
        }  
        
        outputText.append("Total Number of Bids Generated: " + goodBids.size() + "\n");
        
        long estimatedTime = System.nanoTime() - startTime;
        outputText.append(df.format(estimatedTime/1000000000.0) + " seconds." + "\n\n");
        //System.out.println(estimatedTime/1000000000.0 + " seconds.");
    }
    
    
    @SuppressWarnings("UnusedAssignment")
    public static Bid evolve(Bid ancestor, Shift [] shifts, int [] targetBid)
    {
        Bid temp = ancestor;
        
        temp.setFitnessScore(targetBid);
        ancestor = mutate(ancestor, shifts);
        ancestor.setFitnessScore(targetBid);

        if (ancestor.getFitnessScore() > temp.getFitnessScore())
        {
            return ancestor;
        }
        
        else
        {
            return temp;
        }
    }
        
    public static Bid mutate(Bid bid, Shift [] allShifts)
    {
        Random random = new Random();
        Shift [] shiftsInBid = bid.getShifts();
        
        //random elements in the current shift bid is changed to a random element from available shifts
        for (int i = 0; i < random.nextInt(3); i++)
        {
            shiftsInBid[random.nextInt(bid.getSize()-1)] = allShifts[random.nextInt(allShifts.length)];
        }
        
        //new shift bid is created
        Bid newBid = new Bid(shiftsInBid, shiftsInBid.length);
        
        return newBid;
    }
        
    //determines if a bid has already been added to a list of accepted bids
    public static boolean inGoodBids(Bid bid, String [] goodBids)
    {
        return Arrays.asList(goodBids).contains(bid.toString());
    }
    
    //returns an array of an array of shifts
    public static Bid [] getBidBatch(Shift [] shifts, int shiftSize, int batchSize)
    {
        Random generator = new Random();
        int randomNum;        
        
        //malloc for array size of "batchSize"
        Bid [] batch = new Bid[batchSize];
               
        for (int i = 0; i < batchSize; i++)
        {
            Shift [] randomShifts = new Shift[shiftSize]; 
            //create new array of randomly selected shifts
            for (int j = 0; j < shiftSize; j++)
            {
                randomNum = generator.nextInt(shifts.length); 
                randomShifts[j] = shifts[randomNum];          
            }
            
            //add array of new shifts (a bid) to array of bids
            batch[i] = new Bid(randomShifts, shiftSize);
        }
        return batch;
    }
        
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton calculate;
    private javax.swing.JLabel friLabel;
    private javax.swing.JTextField friNum;
    private javax.swing.JTextField initPopText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel monLabel;
    private javax.swing.JTextField monNum;
    private javax.swing.JTextArea outputText;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JCheckBox sameNumCheckbox;
    private javax.swing.JLabel satLabel;
    private javax.swing.JTextField satNum;
    private javax.swing.JTextField secFriNum;
    private javax.swing.JTextField secMonNum;
    private javax.swing.JTextField secSatNum;
    private javax.swing.JTextField secSunNum;
    private javax.swing.JTextField secThuNum;
    private javax.swing.JTextField secTueNum;
    private javax.swing.JTextField secWedNum;
    private javax.swing.JLabel stepOneLabel;
    private javax.swing.JLabel stepThreeLabel;
    private javax.swing.JLabel stepTwoLabel;
    private javax.swing.JLabel sunLabel;
    private javax.swing.JTextField sunNum;
    private javax.swing.JLabel thuLabel;
    private javax.swing.JTextField thuNum;
    private javax.swing.JTextField totalAMTS;
    private javax.swing.JLabel tueLabel;
    private javax.swing.JTextField tueNum;
    private javax.swing.JLabel wedLabel;
    private javax.swing.JTextField wedNum;
    private javax.swing.JLabel weekOneLabel;
    private javax.swing.JLabel weekTwoLabel;
    // End of variables declaration                   

}
